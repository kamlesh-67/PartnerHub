// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  SUPER_ADMIN
  ACCOUNT_ADMIN
  BUYER
  OPERATION
}

// Order status enum
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Product status enum
enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

// User model for authentication and authorization
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(BUYER)
  phone         String?   // Added phone field for user profiles
  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  isActive      Boolean   @default(true)
  
  // Relations
  orders        Order[]
  cartItems     CartItem[]
  addresses     Address[]
  auditLogs     AuditLog[]
  notifications Notification[]
  inventoryTransactions InventoryTransaction[]
  fileUploads   FileUpload[]
  
  // NextAuth fields
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Company model for B2B accounts
model Company {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  website     String?
  taxId       String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  addresses   Address[]
  orders      Order[]
  products    Product[]
  
  @@map("companies")
}

// Address model for shipping and billing
model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  zipCode    String
  country    String   @default("India")
  isDefault  Boolean  @default(false)
  type       String   // "billing" or "shipping"
  userId     String?
  companyId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User?    @relation(fields: [userId], references: [id])
  company    Company? @relation(fields: [companyId], references: [id])
  orders     Order[]  @relation("ShippingAddress")
  billingOrders Order[] @relation("BillingAddress")
  
  @@map("addresses")
}

// Category model for product organization
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("categories")
}

// Product model
model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  shortDescription String?
  sku         String        @unique
  price       Float
  comparePrice Float?
  costPrice   Float?
  stock       Int           @default(0)
  minStock    Int           @default(0)
  status      ProductStatus @default(ACTIVE)
  weight      Float?
  dimensions  String?       // JSON string for length, width, height
  images      String?       // JSON array of image URLs
  tags        String?       // JSON array of tags
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  companyId   String?       // Company that owns this product (null for super admin products)
  company     Company?      @relation(fields: [companyId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
  inventoryTransactions InventoryTransaction[]
  
  @@map("products")
}

// Shopping cart model
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  discount        Float       @default(0)
  total           Float
  notes           String?
  userId          String
  companyId       String?
  shippingAddressId String
  billingAddressId  String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id])
  company         Company?    @relation(fields: [companyId], references: [id])
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  orderItems      OrderItem[]
  paymentRecords  PaymentRecord[]
  
  @@map("orders")
}

// Order items model
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float   // Price at time of order
  orderId   String
  productId String
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Audit Log model for tracking system activities
model AuditLog {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  action        String
  resource      String
  resourceId    String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userEmail     String
  userName      String
  ipAddress     String?
  userAgent     String?
  details       Json?    // Stores oldValues, newValues, metadata as JSON
  severity      String   @default("info") // info, warning, error, critical
  category      String   @default("system") // authentication, user_management, system, data, security
  createdAt     DateTime @default(now())
  
  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([category])
  @@index([severity])
  @@index([timestamp])
}

// Analytics data aggregation table
model AnalyticsMetric {
  id          String   @id @default(cuid())
  metricName  String   // revenue, orders, users, products
  metricValue Float
  period      String   // daily, weekly, monthly
  date        DateTime
  metadata    Json?    // Additional metric data
  createdAt   DateTime @default(now())
  
  @@map("analytics_metrics")
  @@unique([metricName, period, date])
  @@index([metricName])
  @@index([period])
  @@index([date])
}

// Notification system
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   @default("info") // info, success, warning, error
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead    Boolean  @default(false)
  isGlobal  Boolean  @default(false) // System-wide notifications
  metadata  Json?    // Additional notification data
  createdAt DateTime @default(now())
  readAt    DateTime?
  expiresAt DateTime?
  
  @@map("notifications")
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([isGlobal])
  @@index([createdAt])
}

// System Settings
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  category  String   @default("general") // general, email, payment, security
  isPublic  Boolean  @default(false) // Can be accessed by non-admin users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
  @@index([category])
}

// Email Templates for notifications
model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  body      String   // HTML template
  variables Json?    // Template variables
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("email_templates")
}

// Payment Records
model PaymentRecord {
  id            String   @id @default(cuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String   @default("USD")
  status        String   // pending, completed, failed, cancelled, refunded
  paymentMethod String   // credit_card, bank_transfer, etc.
  gatewayId     String?  // Payment gateway transaction ID
  gatewayData   Json?    // Gateway specific data
  failureReason String?
  paidAt        DateTime?
  refundedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("payment_records")
  @@index([orderId])
  @@index([status])
  @@index([paymentMethod])
}

// Inventory tracking
model InventoryTransaction {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  type      String   // in, out, adjustment
  quantity  Int
  reason    String?  // purchase, sale, damage, adjustment
  reference String?  // Order ID, adjustment ID, etc.
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  
  @@map("inventory_transactions")
  @@index([productId])
  @@index([type])
  @@index([createdAt])
}

// File uploads management
model FileUpload {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  entityType  String?  // product, category, company, etc.
  entityId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  @@map("file_uploads")
  @@index([userId])
  @@index([entityType, entityId])
}
